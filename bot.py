import telebot
from telebot import types
import config 
import sqlite3

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ config / Create a bot object using the token from the config file
bot = telebot.TeleBot(config.Token)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö / Connecting to the database
connection = sqlite3.connect('DB/Music_DB.db')
cursor = connection.cursor()

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Music / Retrieving the list of tracks from the Music table
cursor.execute('SELECT Track, Musical_group, Genre, Album, Duration FROM Music')
tracks = cursor.fetchall()
connection.close() 

# –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ç—Ä–µ–∫–æ–≤ / Creating a list of track names
tracks_name = [track for track, musical_group, genre, album, duration in tracks]

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –µ–≥–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å / Creating a dictionary where the key is the track name and the value is its duration
track_duration = {}

# –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å track_duration —Ç—Ä–µ–∫–∏ —Å –∏—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é / Add tracks with their duration to track_duration
for track, musical_group, genre, album, duration in tracks:
    track_duration[track] = duration

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º—É–∑—ã–∫–∏ / Dictionaries for storing the music structure
dct = {} # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –≥—Ä—É–ø–ø–∞ -> –∞–ª—å–±–æ–º -> —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ / Structure: group -> album -> list of tracks
next_track_dct = {} # –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –≤ –∞–ª—å–±–æ–º–µ / Next track in the album
back_track_dct = {} # –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫ –≤ –∞–ª—å–±–æ–º–µ / Previous track in the album
next_album_dct = {} # –°–ª–µ–¥—É—é—â–∏–π –∞–ª—å–±–æ–º / Next album
back_album_dct = {} # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –∞–ª—å–±–æ–º / Previous album


# –§–æ—Ä–º–∏—Ä—É–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ç—Ä–µ–∫–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º –∏ –∞–ª—å–±–æ–º–∞–º / Creating a nested dictionary for tracks grouped by bands and albums
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã / Initialize keys for each musical group
for track, musical_group, genre, album, duration in tracks:
    if musical_group not in dct.keys():
        dct[musical_group] = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–ª—å–±–æ–º–∞ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã / Initialize keys for each album within a group
for track, musical_group, genre, album, duration in tracks:
    if album not in dct[musical_group].keys():
        dct[musical_group][album] = []    

# –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã –∏ –∞–ª—å–±–æ–º—ã / Add tracks to the corresponding groups and albums
for track, musical_group, genre, album, duration in tracks:
    dct[musical_group][album].append(track)


# –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ / Creating dictionaries for track navigation
for track, musical_group, genre, album, duration in tracks:
    lst_track = dct[musical_group][album]
    if lst_track.index(track) == len(lst_track) - 1: # –ï—Å–ª–∏ —Ç—Ä–µ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π, —Å–ª–µ–¥—É—é—â–∏–π ‚Äî –ø–µ—Ä–≤—ã–π / If the track is the last one, the next is the first
        next_track_dct[track] = lst_track[0]
    else: # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ ‚Äî —Å–ª–µ–¥—É—é—â–∏–π –≤ —Å–ø–∏—Å–∫–µ / Otherwise, the next track is the next in the list
        next_track_dct[track] = lst_track[lst_track.index(track) + 1]

for track, musical_group, genre, album, duration in tracks:
    lst_track = dct[musical_group][album]
    if lst_track.index(track) == 0: # –ï—Å–ª–∏ —Ç—Ä–µ–∫ –ø–µ—Ä–≤—ã–π, –ø—Ä–µ–¥—ã–¥—É—â–∏–π ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π / If the track is the first, the previous is the last
        back_track_dct[track] = lst_track[-1]
    else: # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫ ‚Äî –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤ —Å–ø–∏—Å–∫–µ / Otherwise, the previous track is the previous in the list
        back_track_dct[track] = lst_track[lst_track.index(track) - 1]

# –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–ª—å–±–æ–º–æ–≤ / Creating dictionaries for album navigation
for track, musical_group, genre, album, duration in tracks:
    dct_album = list(dct[musical_group].keys())
    if dct_album.index(album) == len(dct_album) - 1: # –ï—Å–ª–∏ –∞–ª—å–±–æ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π, —Å–ª–µ–¥—É—é—â–∏–π ‚Äî –ø–µ—Ä–≤—ã–π / If the album is the last, the next is the first
        next_album_dct[track] = dct[musical_group][dct_album[0]][0]
    else: # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —Å–ª–µ–¥—É—é—â–∏–π –∞–ª—å–±–æ–º ‚Äî —Å–ª–µ–¥—É—é—â–∏–π –≤ —Å–ø–∏—Å–∫–µ / Otherwise, the next album is the next in the list
        next_album_dct[track] = dct[musical_group][dct_album[dct_album.index(album) + 1]][0]

for track, musical_group, genre, album, duration in tracks:
    dct_album = list(dct[musical_group].keys())
    if dct_album.index(album) == 0: # –ï—Å–ª–∏ –∞–ª—å–±–æ–º –ø–µ—Ä–≤—ã–π, –ø—Ä–µ–¥—ã–¥—É—â–∏–π ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π / If the album is the first, the previous is the last
        back_album_dct[track] = dct[musical_group][dct_album[0]][-1]
    else: # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–ª—å–±–æ–º ‚Äî –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤ —Å–ø–∏—Å–∫–µ / Otherwise, the previous album is the previous in the list
        back_album_dct[track] = dct[musical_group][dct_album[dct_album.index(album) - 1]][0]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start / Handler for the /start command
@bot.message_handler(commands = ['start'])
def start(message):
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ / Creating a search button
        markup = types.InlineKeyboardMarkup(row_width=1)
        item = types.InlineKeyboardButton('üîé–ü–æ–∏—Å–∫', switch_inline_query_current_chat = "")

        markup.add(item)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä / Send a sticker
        sti = open('DB/sticker.tgs','rb')
        bot.send_sticker(message.chat.id, sti)
        sti.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π / Sending a welcome message with a button
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏'.format(message.from_user), reply_markup=markup)

    except Exception as e: # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç / Log errors if they occur
        print("{0.id} {0.first_name} {0.last_name}: {1!s}\n{1!s}".format(message.from_user,type(e), str(e)))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∑–∞–ø—Ä–æ—Å–æ–≤ / Handler for inline queries
@bot.inline_handler(func=lambda query: len(query.query) > 0)
def get_text(query):
    try:    
        answ_list = [] # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ / List to store results
        counter = 1 # –°—á–µ—Ç—á–∏–∫ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ / Counter for unique result IDs

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ç—Ä–µ–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏—Ö –ø–æ —Ç–µ–∫—Å—Ç—É –∑–∞–ø—Ä–æ—Å–∞ / Iterate through tracks and filter by query text
        for track, musical_group, genre, album, duration in tracks:
            if track.lower().startswith(query.query.lower()): # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–µ–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É / Filtering tracks by query
                # –û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ / Track description
                description=f"–ñ–∞–Ω—Ä: {genre}\n–ì—Ä—É–ø–ø–∞: {musical_group}\n–ê–ª—å–±–æ–º: {album}" 

                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ / Add result to the list
                answ_list.append(types.InlineQueryResultArticle(
                                        id=f"{counter}", 
                                        title=f"{track}",
                                        description=description,
                                        input_message_content=types.InputTextMessageContent(
                                        message_text="{!s}".format(track))))
                counter += 1

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ / Maximum number of results
        n = 50 
        if counter < n: # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ n / Limit responses if less than n
            n = counter

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ n —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ / Sending up to n results
        bot.answer_inline_query(query.id, answ_list[:n]) 
  
    except Exception as e: # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç / Log errors if they occur
        print("{0.id} {0.first_name} {0.last_name}: {1!s}\n{1!s}".format(query.from_user,type(e), str(e)))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π / Handler for text messages
@bot.message_handler(content_types = ['text'])
def text_request(message):
    try:   
        text = message.text

        if text in tracks_name: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç / Checking that the track exists
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É —Ç—Ä–µ–∫–∞/ Construct the file path to the audio track
            file_path = f'DB/music/{text}.mp3'

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –∏ –∞–ª—å–±–æ–º–æ–≤ / Creating buttons for track and album navigation
            markup = types.InlineKeyboardMarkup(row_width=4)
            item1 = types.InlineKeyboardButton('‚èÆ', callback_data=back_album_dct[text])
            item2 = types.InlineKeyboardButton('‚è™', callback_data=back_track_dct[text])
            item3 = types.InlineKeyboardButton('‚è©', callback_data=next_track_dct[text])
            item4 = types.InlineKeyboardButton('‚è≠', callback_data=next_album_dct[text])

            markup.add(item1,item2,item3,item4)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª / Sending the audio file
            file = open(file_path, 'rb')
            bot.send_audio(message.chat.id, file, title=text, duration=track_duration[text], reply_markup=markup)
            file.close()

    except Exception as e:
        print("{0.id} {0.first_name} {0.last_name}: {1!s}\n{1!s}".format(message.from_user,type(e), str(e)))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫ / Handler for callback buttons
@bot.callback_query_handler(func=lambda call: True)
def button(call):
    try: 
        if call.message:		
            if call.data in tracks_name: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç / Checking that the track exists
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É —Ç—Ä–µ–∫–∞/ Construct the file path to the audio track
                file_path = f'DB/music/{call.data}.mp3'
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –∏ –∞–ª—å–±–æ–º–æ–≤ / Creating buttons for track and album navigation
                markup = types.InlineKeyboardMarkup(row_width=4)
                item1 = types.InlineKeyboardButton('‚èÆ', callback_data=back_album_dct[call.data])
                item2 = types.InlineKeyboardButton('‚è™', callback_data=back_track_dct[call.data])
                item3 = types.InlineKeyboardButton('‚è©', callback_data=next_track_dct[call.data])
                item4 = types.InlineKeyboardButton('‚è≠', callback_data=next_album_dct[call.data])

                markup.add(item1,item2,item3,item4)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª / Sending the audio file
                file = open(file_path, 'rb')
                bot.send_audio(call.message.chat.id, file, title=call.data, duration=track_duration[call.data], reply_markup=markup)
                file.close()

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ / Deleting the old message with buttons
                bot.delete_message(call.message.chat.id, call.message.message_id)
    
    except Exception as e: # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç / Log errors if they occur
        print("{0.id} {0.first_name} {0.last_name}: {1!s}\n{1!s}".format(call.message.from_user,type(e), str(e)))


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ / Starting the bot
bot.polling (none_stop=True)

